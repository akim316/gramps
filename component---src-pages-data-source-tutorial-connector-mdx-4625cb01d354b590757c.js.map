{"version":3,"sources":["webpack:///./src/pages/data-source-tutorial/connector.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","href","subDirectory","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"gcAMO,IAAMA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAcL,EAAc,eAC5BM,EAAaN,EAAc,cAC3BO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,E,oIACF,mBACD,OAAO,YAACM,EAAD,KAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAG5E,uCAAsB,mBAAGC,WAAW,KAAQ,CACxC,KAAQ,gCADU,0BAAtB,4HAGA,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,SAA3B,sKAIF,iBAAQ,CACN,GAAM,qBADR,qBAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gCADQ,8BAGpB,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,KAA8B,mBAAGA,WAAW,UAAa,CACvE,KAAQ,oCADoC,wBAGlD,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gCADQ,mBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iCADQ,2BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oCADQ,oBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8BADQ,2BAItB,iBAAQ,CACN,GAAM,mBADR,mBAGA,YAACR,EAAD,CAAaO,QAAQ,eACvB,YAACN,EAAD,CAAYM,QAAQ,cAApB,yBACA,YAACN,EAAD,CAAYM,QAAQ,cAApB,kCAEE,iBAAQ,CACN,GAAM,yBADR,yBAGA,yMACA,2BAAU,0BAAYC,WAAW,KAAvB,oBAAV,gCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sfAgBL,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,SAA3B,QAA6E,0BAAYA,WAAW,KAAvB,oBAA7E,wNAGQ,mBAAGA,WAAW,KAAQ,CAC1B,KAAQ,yBADJ,mBAHR,MAOF,iBAAQ,CACN,GAAM,iCADR,iCAGA,gGAA+E,0BAAYA,WAAW,KAAvB,0BAA/E,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0sBAsBL,0DAAyC,0BAAYA,WAAW,KAAvB,aAAzC,6BACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,qmCAyBL,iBAAQ,CACN,GAAM,0BADR,2BAGA,uKAKJH,EAAWI,gBAAiB,G,uVCvJbC,ECGI,SAAC,GAAD,MAAGC,EAAH,EAAGA,MAAH,IAAUC,YAAV,MAAiB,GAAjB,SACjB,mBAAKC,UAAWC,IAAGC,cAAD,OAAgBC,YAAWJ,EAAKK,OAAhC,KAChB,mBAAKJ,UAAU,YACb,mBAAKA,UAAU,WACb,mBAAKA,UAAU,iBACb,kBAAIK,GAAG,aAAaL,UAAWM,QAC5BR,Q,kBCTES,ECIE,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,iBAA8BC,EAAqB,EAAjCC,WAGhBA,EAHiD,OAEnEC,KACEC,aAAgBF,WAHiD,EAkBnCD,GAAkBC,EAA5CG,EAlB6D,EAkB7DA,QAEFC,EAAUD,EAAN,eApB2D,EAkBpDE,aAEP,aAAqDP,EAE/D,OAAOK,EACL,mBAAKb,UAAS,WAAagB,OACzB,mBAAKhB,UAAU,WACb,iBAAGA,UAAWiB,OAAMH,KAAMA,GAA1B,8BAKF,M,8BClCSI,E,gLCkBbC,OAAA,WAAU,IAAD,EACgBC,KAAKpC,MAApBe,EADD,EACCA,KAAMsB,EADP,EACOA,KACRC,EAAaD,EAChBE,MAAM,KACNC,OAAOC,SACPC,OAAO,GAAG,GAEPC,EAAW5B,EAAK6B,KAAI,SAAAC,GAAQ,IAAD,EACzBC,EAAeC,IAAQF,EAAK,CAAEG,OAAO,IACrCC,EAAWH,IAAiBR,EAC5BR,EAAOO,EAAKa,QAAQZ,EAAYQ,GACtC,OACE,kBAAIK,IAAKN,EAAK7B,UAAWC,KAAE,OAAImC,gBAAeH,EAAnB,GAA+BI,aACxD,YAAC,OAAD,CAAMrC,UAAWiB,OAAMqB,GAAE,GAAKxB,GAC3Be,OAMT,OACE,mBAAK7B,UAAWuC,iBACd,mBAAKvC,UAAU,YACb,mBAAKA,UAAU,WACb,mBAAKA,UAAU,mCACb,uBACE,kBAAIA,UAAWwC,QAAOb,S,GAhCAc,IAAMC,W,SCmD7BC,IArDC,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EACGF,EAAlDG,mBAD+C,MACjC,GADiC,EAC7BvC,EAAgCoC,EAAhCpC,iBAAkBwC,EAAcJ,EAAdI,UACpCjD,EAA8CgD,EAA9ChD,KAAMD,EAAwCiD,EAAxCjD,MAAOmD,EAAiCF,EAAjCE,MAAOC,EAA0BH,EAA1BG,YAAaC,EAAaJ,EAAbI,SAI/BC,EAN6C,OAMrDzC,KAAQyC,WAUJ/B,EAAO+B,EACTN,EAASO,SAASnB,QAAQkB,EAAY,IACtCN,EAASO,SAOP/B,EAJCvB,EACEsB,EAAKE,MAAM,KAAKG,OAAO,GAAG,IAAMK,IAAQhC,EAAK,GAAI,CAAEiC,OAAO,IAD/C,GAKpB,OACE,YAACsB,EAAA,EAAD,CACEC,UAAU,EACVN,MAAOA,EACPO,UAAW1D,EACX2D,gBAAiBP,EACjBQ,aAAcP,EACdH,UAAWA,GAEX,YAAC,EAAD,CAAYlD,MAAOA,EAAO6D,MAAM,QAAQ5D,KAAMA,IAC7CA,GAAQ,YAAC,EAAD,CAAUsB,KAAMA,EAAMtB,KAAMA,EAAMuB,WAAYA,IACvD,YAACsC,EAAA,EAAD,CAAMC,QAAM,GACThB,EACD,YAAC,EAAD,CAAUrC,iBAAkBA,KAE9B,YAACsD,EAAA,EAAD,CACElB,YAAaA,EACbE,SAAUA,EACVzB,KAAMA,EACNtB,KAAMA,EACNuB,WAAYA,IAEd,YAACyC,EAAA,EAAD","file":"component---src-pages-data-source-tutorial-connector-mdx-4625cb01d354b590757c.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/gramps-graphql/gramps/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Now that we’ve `}<a parentName=\"p\" {...{\n        \"href\": \"/data-source-tutorial/setup\"\n      }}>{`set up the data source`}</a>{`, we can start building the data source itself. In this section, we’ll tell the data source where data should come from.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` This example accesses data from a REST API, but the data could also\ncome from a database or, really, anywhere that can give a response we can\nconvert to JSON.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"table-of-contents\"\n    }}>{`Table of Contents`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/setup\"\n        }}>{`Initial Data Source Setup`}</a></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`> `}<a parentName=\"strong\" {...{\n            \"href\": \"/data-source-tutorial/connector\"\n          }}>{`Create a Connector`}</a></strong></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/model\"\n        }}>{`Create a Model`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/schema\"\n        }}>{`Write a GraphQL Schema`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/resolvers\"\n        }}>{`Write Resolvers`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/dev\"\n        }}>{`Use Development Modes`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"in-this-section\"\n    }}>{`In This Section`}</h2>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Create Your Connector</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Write Tests for the Connector</AnchorLink>\n    </AnchorLinks>\n    <h2 {...{\n      \"id\": \"create-your-connector\"\n    }}>{`Create Your Connector`}</h2>\n    <p>{`The first code change we need to make is to update the Connector to point to the API we want to use. This class sets up the requests themselves, plus helpers to enable caching.`}</p>\n    <p>{`In `}<inlineCode parentName=\"p\">{`src/connector.js`}</inlineCode>{`, make the following change:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  import { GraphQLConnector } from '@gramps/gramps-express';\n\n- // TODO: change \\`YourDataSourceConnector\\` to a descriptive name\n- export default class YourDataSourceConnector extends GraphQLConnector {\n+ export default class IMDBAPIConnector extends GraphQLConnector {\n    /**\n-    * TODO: describe this API endpoint\n+    * API for looking up movie info\n     * @member {string}\n     */\n-   apiBaseUri = \\`https://example.org/v2\\`;\n+   apiBaseUri = \\`https://www.theimdbapi.org/api\\`;\n  }\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` The `}<inlineCode parentName=\"p\">{`GraphQLConnector`}</inlineCode>{` class sets up a lot of core functionality in\nthe background, including methods for sending queries and mutations, plus\nhelpers for caching data. For more information on what’s happening behind the\nscenes, see `}<a parentName=\"p\" {...{\n          \"href\": \"https://git.io/vdQzQ\"\n        }}>{`the source code`}</a>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"write-tests-for-the-connector\"\n    }}>{`Write Tests for the Connector`}</h2>\n    <p>{`Next, update the tests for the connector by making the changes below in `}<inlineCode parentName=\"p\">{`test/connector.test.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  import { GraphQLConnector } from '@gramps/gramps-express';\n  import Connector from '../src/connector';\n\n- // TODO: Update the data source name.\n- const DATA_SOURCE_NAME = 'YourDataSource';\n+ const DATA_SOURCE_NAME = 'IMDBAPI';\n  const connector = new Connector();\n\n  describe(\\`\\${DATA_SOURCE_NAME}Connector\\`, () => {\n    it('inherits the GraphQLConnector class', () => {\n      expect(connector).toBeInstanceOf(GraphQLConnector);\n    });\n\n    it('uses the appropriate URL', () => {\n-     // TODO: Update the data source API endpoint.\n-     expect(connector.apiBaseUri).toBe(\\`https://example.org/v2\\`);\n+     expect(connector.apiBaseUri).toBe(\\`https://www.theimdbapi.org/api\\`);\n    });\n  });\n`}</code></pre>\n    <p>{`Verify that this works by running `}<inlineCode parentName=\"p\">{`yarn test`}</inlineCode>{`. Everything should pass:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`@jlengstorf: ~/dev/gramps-graphql/data-source-imdbapi  (master)\n$ yarn test\nyarn run v1.2.1\n$ npm run lint --silent && npm run test:unit --silent\n PASS  test/resolvers.test.js\n PASS  test/connector.test.js\n PASS  test/model.test.js\n PASS  test/index.test.js\n\nTest Suites: 4 passed, 4 total\nTests:       16 passed, 16 total\nSnapshots:   0 total\nTime:        1.839s\nRan all test suites.\n--------------|----------|----------|----------|----------|----------------|\nFile          |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\n--------------|----------|----------|----------|----------|----------------|\nAll files     |      100 |      100 |      100 |      100 |                |\n connector.js |      100 |      100 |      100 |      100 |                |\n index.js     |      100 |      100 |      100 |      100 |                |\n model.js     |      100 |      100 |      100 |      100 |                |\n resolvers.js |      100 |      100 |      100 |      100 |                |\n--------------|----------|----------|----------|----------|----------------|\n✨  Done in 4.83s.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"next-up-create-a-model\"\n    }}>{`Next Up: Create a Model`}</h2>\n    <p>{`Hey! That wasn’t bad, right? In the next section, we’ll show our data source how to access data by defining data access methods in the model.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.string,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory } = repositoryProp || repository;\n\n  const href = `${baseUrl}/tree/master${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const href = slug.replace(currentTab, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}