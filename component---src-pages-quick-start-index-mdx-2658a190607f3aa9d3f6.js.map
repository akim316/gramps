{"version":3,"sources":["webpack:///./src/pages/quick-start/index.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","href","subDirectory","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"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","file":"component---src-pages-quick-start-index-mdx-2658a190607f3aa9d3f6.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/gramps-graphql/gramps/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`GrAMPS is an easy way to set up a GraphQL gateway (server) using community-provided data sources. In the next 5 minutes, let’s set up a working GraphQL gateway, then pull in live data using a GrAMPS data source.`}</p>\n    </PageDescription>\n    <h2 {...{\n      \"id\": \"step-1-create-a-new-project\"\n    }}>{`Step 1. Create a new project`}</h2>\n    <p><strong parentName=\"p\">{`NOTE:`}</strong>{` This example uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://yarnpkg.com/\"\n      }}><inlineCode parentName=\"a\">{`yarn`}</inlineCode></a>{`. `}<inlineCode parentName=\"p\">{`npm`}</inlineCode>{` alternatives are shown in comments.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Make a directory and move into it.\nmkdir my-gateway && cd $_\n\n# Initialize a package.json\nyarn init -y\n# npm init -y\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-2-set-up-the-build-process\"\n    }}>{`Step 2. Set up the build process`}</h2>\n    <p>{`Because we want to use the modern features of Node, let’s create a minimal Babel configuration and add a build script.`}</p>\n    <h3 {...{\n      \"id\": \"install-dependencies\"\n    }}>{`Install dependencies`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add --dev @babel/core @babel/cli @babel/preset-env\n# npm install --save-dev @babel/core @babel/cli @babel/preset-env\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-a-babelrc\"\n    }}>{`Create a `}<inlineCode parentName=\"h3\">{`.babelrc`}</inlineCode></h3>\n    <p>{`In the project root, add a new file called `}<inlineCode parentName=\"p\">{`.babelrc`}</inlineCode>{` with the following configuration:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"targets\": {\n          \"node\": \"current\"\n        }\n      }\n    ]\n  ]\n}\n`}</code></pre>\n    <p>{`Thanks to the smarts under the hood of `}<inlineCode parentName=\"p\">{`@babel/preset-env`}</inlineCode>{`, we don’t have to do much.`}</p>\n    <h3 {...{\n      \"id\": \"add-build-and-dev-scripts\"\n    }}>{`Add build and dev scripts`}</h3>\n    <p>{`Once we have a server, we’ll need to run our code through Babel to avoid any compatibility issues. To do that, let’s add a build script to our `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  {\n    \"name\": \"my-gateway\",\n    \"version\": \"1.0.0\",\n-   \"main\": \"index.js\",\n+   \"main\": \"dist/index.js\",\n    \"license\": \"MIT\",\n+   \"scripts\": {\n+     \"build\": \"babel index.js -d dist\"\n+   },\n    \"devDependencies\": {\n      \"@babel/cli\": \"^7.6.4\",\n      \"@babel/core\": \"^7.6.4\",\n      \"@babel/preset-env\": \"^7.6.3\"\n    }\n  }\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` We also changed the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` entry so that the default start functionality from Node will point to the built server.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"step-3-set-up-a-server\"\n    }}>{`Step 3. Set up a server`}</h2>\n    <p>{`Now that we’ve got a project to work in, let’s set up a simple Express server.`}</p>\n    <h3 {...{\n      \"id\": \"add-dependencies\"\n    }}>{`Add dependencies`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Install server dependencies.\nyarn add express get-port\n# npm install --save express get-port\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-the-server\"\n    }}>{`Create the server`}</h3>\n    <p>{`Create a new file called `}<inlineCode parentName=\"p\">{`index.js`}</inlineCode>{` in the project root, then add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Express from 'express';\nimport getPort from 'get-port';\n\nasync function startServer() {\n  const PORT = await getPort(8080);\n\n  const app = Express();\n\n  app.get('/', (_, res) => res.send('Hello world!'));\n\n  app.listen(PORT, () => {\n    console.log(\\`=> server running at http://localhost:\\${PORT}/\\`);\n  });\n}\n\nstartServer();\n`}</code></pre>\n    <p>{`This file creates an Express app, sets up a “Hello world!” endpoint, and starts the app listening on port 8080 (or a random port if 8080 is already in use).`}</p>\n    <h3 {...{\n      \"id\": \"verify-that-the-server-works\"\n    }}>{`Verify that the server works`}</h3>\n    <p>{`To verify that the server works, build and then start it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn build\n# npm run build\n\n# Start the built server\nnode dist\n`}</code></pre>\n    <p>{`Assuming port 8080 isn’t in use on your machine, opening `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:8080/\"\n      }}>{`http://localhost:8080/`}</a>{` should result in a “Hello world!” message.`}</p>\n    <h2 {...{\n      \"id\": \"step-4-create-a-gramps-powered-graphql-gateway\"\n    }}>{`Step 4. Create a GrAMPS-powered GraphQL gateway`}</h2>\n    <p>{`Now that we have a working server, we can set up GrAMPS to get our gateway running.`}</p>\n    <h3 {...{\n      \"id\": \"add-dependencies-1\"\n    }}>{`Add dependencies`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @gramps/gramps apollo-server-express graphql\n# npm install --save @gramps/gramps apollo-server-express graphql\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"set-up-the-graphql-endpoints\"\n    }}>{`Set up the GraphQL endpoints`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  import Express from 'express';\n  import getPort from 'get-port';\n\n+ import { ApolloServer } from 'apollo-server-express';\n+ import gramps from '@gramps/gramps';\n\n  async function startServer() {\n    const PORT = await getPort(8080);\n\n+   const GraphQLOptions = await gramps();\n\n+   const server = new ApolloServer(GraphQLOptions);\n\n    const app = Express();\n\n+   server.applyMiddleware({ app });\n\n-   app.get('/', (_, res) => res.send('Hello world!'));\n\n    app.listen(PORT, () => {\n      console.log(\\`=> server running at http://localhost:\\${PORT}/\\`);\n    });\n  }\n\n  startServer();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"test-the-gateway\"\n    }}>{`Test the gateway`}</h3>\n    <p>{`Let’s make sure everything is working by starting the server and running a test query.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn build\n# npm run build\n\nnode dist\n`}</code></pre>\n    <p>{`Open `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:8080/graphql\"\n      }}>{`http://localhost:8080/graphql`}</a>{` and run the following query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  grampsVersion\n}\n`}</code></pre>\n    <p>{`The result should look something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"grampsVersion\": \"4.0.0\"\n  }\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` By default, GrAMPS exposes a single query — `}<inlineCode parentName=\"p\">{`grampsVersion`}</inlineCode>{` — which returns the current package version of `}<inlineCode parentName=\"p\">{`@gramps/gramps`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"step-5-add-a-gramps-data-source\"\n    }}>{`Step 5. Add a GrAMPS data source`}</h2>\n    <p>{`Now that the gateway is running, let’s hook it up to some data by installing the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gramps-graphql/data-source-xkcd\"\n      }}>{`xkcd GrAMPS data source`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"add-dependencies-2\"\n    }}>{`Add dependencies`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @gramps/data-source-xkcd graphql-tools\n# npm install --save @gramps/data-source-xkcd graphql-tools\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` GrAMPS data sources have a `}<inlineCode parentName=\"p\">{`peerDependency`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`graphql-tools`}</inlineCode>{`. This avoids a conflict where multiple data sources could introduce multiple versions of `}<inlineCode parentName=\"p\">{`graphql-tools`}</inlineCode>{` as subdependencies.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"add-the-data-source-to-the-gateway\"\n    }}>{`Add the data source to the gateway`}</h3>\n    <p>{`Adding data sources to a GrAMPS gateway requires just two lines of code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  import Express from 'express';\n  import getPort from 'get-port';\n\n  import { ApolloServer } from 'apollo-server-express';\n  import gramps from '@gramps/gramps';\n+ import XKCD from '@gramps/data-source-xkcd';\n\n  async function startServer() {\n    const PORT = await getPort(8080);\n\n-   const GraphQLOptions = await gramps();\n+   const GraphQLOptions = await gramps({\n+     dataSources: [XKCD]\n+   });\n\n    const server = new ApolloServer(GraphQLOptions);\n\n    const app = Express();\n\n    server.applyMiddleware({ app });\n\n    app.get('/', (_, res) => res.send('Hello world!'));\n\n    app.listen(PORT, () => {\n      console.log(\\`=> server running at http://localhost:\\${PORT}/\\`);\n    });\n  }\n\n  startServer();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"test-the-data-source\"\n    }}>{`Test the data source`}</h3>\n    <p>{`To verify that everything is working, run the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn build\n# npm run build\n\nnode dist\n`}</code></pre>\n    <p>{`Open `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:8080/graphql\"\n      }}>{`http://localhost:8080/graphql`}</a>{` and run the following query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  getComicById(id: 123) {\n    title\n    link\n  }\n}\n`}</code></pre>\n    <p>{`You should see the following output:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"getComicById\": {\n      \"title\": \"Centrifugal Force\",\n      \"link\": \"https://xkcd.com/123/\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Bam! We just added live data from a third party in two lines of code!`}</p>\n    <h2 {...{\n      \"id\": \"step-6-add-the-gramps-cli-for-development\"\n    }}>{`Step 6. Add the GrAMPS CLI for development`}</h2>\n    <p>{`In order to give ourselves the ability to develop more easily — for example, using mock data, or running our gateway with a local data source we’re building — we’ll need to add the GrAMPS CLI.`}</p>\n    <h3 {...{\n      \"id\": \"add-dependencies-3\"\n    }}>{`Add dependencies`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add --dev @gramps/cli\n# npm install --save-dev @gramps/cli\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-package-scripts\"\n    }}>{`Create package scripts`}</h3>\n    <p>{`Let’s add a `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{` script that will run the GrAMPS CLI’s `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{` command and tell it to use our gateway.`}</p>\n    <p>{`For convenience, let’s also add a `}<inlineCode parentName=\"p\">{`predev`}</inlineCode>{` script to rebuild the gateway every time we run the `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{` script.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  {\n    \"name\": \"my-gateway\",\n    \"version\": \"1.0.0\",\n    \"main\": \"index.js\",\n    \"license\": \"MIT\",\n    \"scripts\": {\n+     \"predev\": \"yarn build\",\n+     \"dev\": \"gramps dev --gateway dist\",\n      \"build\": \"babel index.js -d dist\"\n    },\n    \"devDependencies\": {\n      \"@babel/cli\": \"^7.6.4\",\n      \"@babel/core\": \"^7.6.4\",\n      \"@babel/preset-env\": \"^7.6.3\",\n      \"@gramps/cli\": \"^1.5.3\"\n    },\n    \"dependencies\": {\n      \"@gramps/data-source-xkcd\": \"^2.0.0\",\n      \"@gramps/gramps\": \"^4.0.1\",\n      \"apollo-server-express\": \"^2.9.6\",\n      \"express\": \"^4.17.1\",\n      \"get-port\": \"^5.0.0\",\n      \"graphql\": \"^14.5.8\",\n      \"graphql-tools\": \"^4.0.5\"\n    }\n  }\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` If you’re using `}<inlineCode parentName=\"p\">{`npm`}</inlineCode>{`, make sure to update the `}<inlineCode parentName=\"p\">{`predev`}</inlineCode>{` command to use `}<inlineCode parentName=\"p\">{`npm run build`}</inlineCode>{` instead.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"test-the-dev-script\"\n    }}>{`Test the dev script`}</h3>\n    <p>{`Test that the script worked by running the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn dev\n# npm run dev\n`}</code></pre>\n    <p>{`Open `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:8080/graphiql\"\n      }}>{`http://localhost:8080/graphiql`}</a>{` and run a test query. This should be exactly the same as our previous test of the gateway.`}</p>\n    <p>{`Next, let’s use the CLI to run our gateway with mock data:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn dev --mock\n# npm run dev -- --mock\n`}</code></pre>\n    <p>{`Open `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:8080/graphiql\"\n      }}>{`http://localhost:8080/graphiql`}</a>{` and run the test query again:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  getComicById(id: 123) {\n    title\n    link\n  }\n}\n`}</code></pre>\n    <p>{`This time, the response should be placeholder text that looks something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"getComicById\": {\n      \"title\": \"Quidem illo\",\n      \"link\": \"http://Sylvester.biz/\"\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.string,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory } = repositoryProp || repository;\n\n  const href = `${baseUrl}/tree/master${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const href = slug.replace(currentTab, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}