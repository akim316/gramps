{"version":3,"sources":["webpack:///./src/pages/data-source-tutorial/model.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","title","isMDXComponent","PageHeader","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","href","subDirectory","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"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","file":"component---src-pages-data-source-tutorial-model-mdx-60ea35cc850d732354da.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/gramps-graphql/gramps/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Now that the `}<a parentName=\"p\" {...{\n        \"href\": \"data-source-tutorial/connector\"\n      }}>{`connector is ready`}</a>{`, we can write our data model class. This is pretty similar to any data access class you would write for an app, whether or not it uses GraphQL. If you’re familiar with the term `}<abbr title=\"Create Read Update Delete\">{`CRUD`}</abbr>{`, this is the CRUD part of the data source.`}</p>\n    <h2 {...{\n      \"id\": \"table-of-contents\"\n    }}>{`Table of Contents`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/setup\"\n        }}>{`Initial Data Source Setup`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/connector\"\n        }}>{`Create a Connector`}</a></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`> `}<a parentName=\"strong\" {...{\n            \"href\": \"/data-source-tutorial/model\"\n          }}>{`Create a Model`}</a></strong></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/schema\"\n        }}>{`Write a GraphQL Schema`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/resolvers\"\n        }}>{`Write Resolvers`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/dev\"\n        }}>{`Use Development Modes`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"in-this-section\"\n    }}>{`In This Section`}</h2>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Modify the Class Name and Remove the Example Method</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Write Helper Methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Write a Data Access Method</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Write Tests for the Model</AnchorLink>\n    </AnchorLinks>\n    <h2 {...{\n      \"id\": \"modify-the-class-name-and-remove-the-example-method\"\n    }}>{`Modify the Class Name and Remove the Example Method`}</h2>\n    <p>{`To start, rename the model class in `}<inlineCode parentName=\"p\">{`src/model.js`}</inlineCode>{` and remove the example method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`- // TODO: change \\`YourDataSourceModel\\` to a descriptive name\n- export default class YourDataSourceModel extends GraphQLModel {\n+ export default class IMDBAPIModel extends GraphQLModel {\n-   /**\n-    * Loads a thing by its ID\n-    * @param  {String}  id  the ID of the thing to load\n-    * @return {Promise}     resolves with the loaded user data\n-    */\n-   getById(id) {\n-     return this.connector.get(\\`/data/\\${id}\\`).catch(res =>\n-       this.throwError(res, {\n-         description: 'This is an example call. Add your own!',\n-         docsLink:\n-           'https://gramps-graphql.github.io/gramps-express/data-source/tutorial/',\n-       }),\n-     );\n-   }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"write-helper-methods\"\n    }}>{`Write Helper Methods`}</h2>\n    <p>{`Since the API we’re using has multiple endpoints that all use query parameters, we’re going to write a couple helper functions to avoid repeating ourselves in the code.`}</p>\n    <p>{`We’ll make these helper functions pure so they’re easy to understand and debug, and we’ll put them `}<strong parentName=\"p\">{`outside the class declaration`}</strong>{`.`}</p>\n    <p>{`The first helper, `}<inlineCode parentName=\"p\">{`makeUrlSafe`}</inlineCode>{`, accepts a string and returns a URL-encoded string that uses `}<inlineCode parentName=\"p\">{`+`}</inlineCode>{` for spaces instead of the uglier `}<inlineCode parentName=\"p\">{`%20`}</inlineCode>{` syntax.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+ const makeUrlSafe = str => encodeURIComponent(str).replace('%20', '+');\n\n  export default class IMDBAPIModel extends GraphQLModel {\n`}</code></pre>\n    <p>{`The second helper, `}<inlineCode parentName=\"p\">{`getQueryString`}</inlineCode>{`, converts an object (e.g. `}<inlineCode parentName=\"p\">{`{ name: 'Idris Elba' }`}</inlineCode>{`) into a query string (e.g. `}<inlineCode parentName=\"p\">{`name=Idris+Elba`}</inlineCode>{`), using `}<inlineCode parentName=\"p\">{`makeUrlSafe`}</inlineCode>{` to encode the values and removing any empty arguments.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  const makeUrlSafe = str => encodeURIComponent(str).replace('%20', '+');\n+ const getQueryString = args =>\n+   Object.keys(args)\n+     .map(key => (args[key] ? \\`\\${key}=\\${makeUrlSafe(args[key])}\\` : false))\n+     // Remove any arguments that were falsy.\n+     .filter(pair => pair !== false)\n+     // Turn the array into a query string.\n+     .join('&');\n\n  export default class IMDBAPIModel extends GraphQLModel {\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"write-a-data-access-method\"\n    }}>{`Write a Data Access Method`}</h2>\n    <p>{`Now we can write our first method, which will allow us to search for a movie by its title and (optionally) year:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  /**\n   * Searches for a movie by its title and (optionally) its release year.\n   *\n   * @see http://www.theimdbapi.org/\n   * @param  {String}  args.title  movie title to search for\n   * @param  {String?} args.year   year the movie was released\n   * @return {Promise}             resolves with movie(s) matching the search\n   */\n  searchByTitle(args) {\n    return this.connector\n      .get(\\`/find/movie?\\${getQueryString(args)}\\`)\n      .catch(res =>\n        this.throwError(res, {\n          description: 'Unable to search movies',\n          docsLink: 'https://github.com/gramps-express/data-source-imdbapi',\n        }),\n      );\n  }\n`}</code></pre>\n    <p>{`For the sake of brevity, we won’t include the other three methods for the model here. However, you can see the full model code `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gramps-graphql/data-source-imdbapi/blob/master/src/model.js\"\n      }}>{`on GitHub`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"write-tests-for-the-model\"\n    }}>{`Write Tests for the Model`}</h2>\n    <p>{`To test the model, let’s open up `}<inlineCode parentName=\"p\">{`test/model.test.js`}</inlineCode>{`, update the data source name, and remove the example tests:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`- // TODO: Update the data source name.\n- const DATA_SOURCE_NAME = 'YourDataSource';\n+ const DATA_SOURCE_NAME = 'IMDBAPI';\n\n  const connector = new Connector();\n  const model = new Model({ connector });\n\n  describe(\\`\\${DATA_SOURCE_NAME}Model\\`, () => {\n    it('inherits the GraphQLModel class', () => {\n      expect(model).toBeInstanceOf(GraphQLModel);\n    });\n\n-   // TODO: Update this test to use your model’s method(s).\n-   describe('getById()', () => {\n+   describe('searchMoviesByTitle()', () => {\n-     it('calls the correct endpoint with a given ID', () => {\n-       const spy = jest.spyOn(connector, 'get');\n-\n-       model.getById('1234');\n-       expect(spy).toHaveBeenCalledWith('/data/1234');\n-     });\n-\n-     it('throws a GrampsError if something goes wrong', async () => {\n-       expect.assertions(1);\n-\n-       model.connector.get.mockImplementationOnce(() =>\n-         Promise.reject({ no: 'good' }),\n-       );\n-\n-       try {\n-         // TODO: Update to use one of your model’s methods.\n-         await model.getById('1234');\n-       } catch (error) {\n-         expect(error.isBoom).toEqual(true);\n-       }\n-     });\n    });\n`}</code></pre>\n    <p>{`Inside the `}<inlineCode parentName=\"p\">{`searchMoviesByTitle()`}</inlineCode>{` block, let’s add a test to ensure that the model method sends a call to the IMDB API. We do this by by `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/jest/docs/en/jest-object.html#jestspyonobject-methodname)\"\n      }}>{`spying`}</a>{` on the connector’s `}<inlineCode parentName=\"p\">{`get()`}</inlineCode>{` method so we can see what the API call looks like after processing.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  describe('searchMoviesByTitle()', () => {\n    it('calls the correct endpoint with a given ID', () => {\n      const spy = jest.spyOn(connector, 'get');\n\n      model.searchMoviesByTitle({ title: 'Test Movie' });\n      expect(spy).toHaveBeenCalledWith('/find/movie?title=Test+Movie');\n    });\n  });\n`}</code></pre>\n    <p>{`Next, let’s test that the option `}<inlineCode parentName=\"p\">{`year`}</inlineCode>{` parameter works:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`    it('correctly adds the year if one is supplied', () => {\n      const spy = jest.spyOn(connector, 'get');\n\n      model.searchMoviesByTitle({ title: 'Test Movie', year: '1979' });\n      expect(spy).toHaveBeenCalledWith(\n        '/find/movie?title=Test+Movie&year=1979',\n      );\n    });\n`}</code></pre>\n    <p>{`And let’s also make sure that our `}<inlineCode parentName=\"p\">{`getQueryString()`}</inlineCode>{` helper is dropping empty parameters properly:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`    it('ignores the year if an empty value is provided', () => {\n      const spy = jest.spyOn(connector, 'get');\n\n      model.searchMoviesByTitle({ title: 'Test Movie', year: '' });\n      expect(spy).toHaveBeenCalledWith('/find/movie?title=Test+Movie');\n    });\n`}</code></pre>\n    <p>{`Finally, let’s make sure we get a `}<inlineCode parentName=\"p\">{`GrampsError`}</inlineCode>{` if the request fails:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`    it('throws a GrampsError if something goes wrong', async () => {\n      expect.assertions(3);\n\n      model.connector.get.mockImplementationOnce(() =>\n        Promise.reject(Error('boom')),\n      );\n\n      try {\n        await model.searchMoviesByTitle({ title: 'Test Movie' });\n      } catch (error) {\n        expect(error.isBoom).toEqual(true);\n        expect(error.output.payload.description).toEqual(\n          'Unable to search movies',\n        );\n        expect(error.output.payload.docsLink).toEqual(\n          'https://github.com/gramps-express/data-source-imdbapi',\n        );\n      }\n    });\n`}</code></pre>\n    <p>{`For the full model test suite, `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gramps-graphql/data-source-imdbapi/blob/master/test/model.test.js\"\n      }}>{`check out GitHub`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"next-up-write-a-schema\"\n    }}>{`Next Up: Write a Schema`}</h2>\n    <p>{`Okay, great — we can access data! In the next section, we’ll describe the data that comes back from the IMDB API as a GraphQL schema.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.string,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory } = repositoryProp || repository;\n\n  const href = `${baseUrl}/tree/master${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const href = slug.replace(currentTab, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}